{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA,gGAAgG;AAChG,gGAAgG;AAChG;AACA;AACA,kBAAkB,8EAA8E;AAChG;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,4DAA4D;AAC5D;AACA,4DAA4D;AAC5D;AACA,cAAc,8CAA8C;AAC5D;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;ACrHf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,MAAM,SAAS;AACpD,kDAAkD,WAAW;AAC7D,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA,0DAA0D,WAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF,+CAA+C,IAAI,YAAY,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iCAAiC,wCAAwC;AACvG;AACA,gBAAgB;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,gCAAgC,iCAAiC,uCAAuC;AACxG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iEAAe;;;;;;;;;;;;;;;ACzD8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6DAAQ;AACpB,oEAAoE;AACpE;AACA;AACA;AACA,aAAa;AACb,oEAAoE;AACpE;AACA,aAAa,uDAAuD;AACpE;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C,uEAAuE;AACvE;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;ACxEf,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F;AAC5F;AACA,KAAK;AACL;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,KAAK;AACL;AACA,wEAAwE;AACxE,wEAAwE;AACxE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK;AACF;;;;;;;;;;;;;;;ACpDlB,gBAAgB,qEAAqE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,gCAAgC,cAAc;AAC9C,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,gDAAgD;AAChD;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gDAAgD;AAChD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe;;;;;;;;;;;;;;ACvGf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,SAAS;AACT;AACA,4DAA4D;AAC5D;AACA,SAAS;AACT;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF,gFAAgF;AAChF;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA,iEAAe;;;;;;;;;;;;;;ACzCf;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,uBAAuB,IAAI;AAC3B,UAAU;AACV;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;AChEf,wDAAwD;AACxD,wDAAwD;AACxD;AACA,wDAAwD;AACxD;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;UCXA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNiC;AACE;AACA;AACA;AACF;AACE;AACA;AACM;AACzC;AACA;AACA;AACA,qCAAqC,yDAAS;AAC9C;AACA,IAAI,0DAAI;AACR,IAAI,2DAAK;AACT,IAAI,2DAAK;AACT,IAAI,2DAAK;AACT,IAAI,0DAAI;AACR,IAAI,2DAAK;AACT,IAAI,2DAAK;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,C","sources":["webpack://food_dist/./js/modules/calc.js","webpack://food_dist/./js/modules/cards.js","webpack://food_dist/./js/modules/forms.js","webpack://food_dist/./js/modules/modal.js","webpack://food_dist/./js/modules/slide.js","webpack://food_dist/./js/modules/tabs.js","webpack://food_dist/./js/modules/timer.js","webpack://food_dist/./js/services/services.js","webpack://food_dist/webpack/bootstrap","webpack://food_dist/webpack/runtime/define property getters","webpack://food_dist/webpack/runtime/hasOwnProperty shorthand","webpack://food_dist/webpack/runtime/make namespace object","webpack://food_dist/./js/script.js"],"sourcesContent":["function calc() {\r\n    \r\n    // Calc: \r\n\r\n    let result = document.querySelector('.calculating__result span')        // записываем результат, обращаясь к блоку calculating__result и контейнеру span \r\n\r\n    let sex = 'female',\r\n    height, \r\n    weight, \r\n    age, \r\n    ratio = '1.375'\r\n\r\n    if (localStorage.getItem('sex')) {\r\n        sex = localStorage.getItem('sex')\r\n    } else {\r\n        sex = 'female'\r\n        localStorage.setItem('sex', 'female')\r\n    }\r\n\r\n    if (localStorage.getItem('ratio')) {\r\n        ratio = localStorage.getItem('ratio')\r\n    } else {\r\n        ratio = 1.375\r\n        localStorage.setItem('ratio', 'female')\r\n    }\r\n\r\n    function initLocalSetting(selector, activeClass) {\r\n        let elements = document.querySelectorAll(selector)\r\n\r\n        elements.forEach(elem => {\r\n            elem.classList.remove(activeClass)\r\n            if (elem.getAttribute('id') == localStorage.getItem('sex')) {\r\n                elem.classList.add(activeClass)\r\n            }\r\n            if(elem.getAttribute('data-ratio') == localStorage.getItem('ratio')) {\r\n                elem.classList.add(activeClass)\r\n            }\r\n        })\r\n    }\r\n\r\n    initLocalSetting('#gender div', 'calculating__choose-item_active')\r\n    initLocalSetting('.calculating__choose_big div', 'calculating__choose-item_active')\r\n    \r\n    function calcTotal() {                                              // рассчитываем значения \r\n        if (!sex || !height || !weight || !age || !ratio) {             // если хотя бы у одного элемента, значение false, т.е. не введены данные \r\n            result.textContent = '____'                                 // выводим сообщение\r\n            return                                                      // прерываем все дальнейште действия \r\n        }\r\n\r\n        if (sex == 'female') {\r\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio)\r\n        } else {\r\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio)\r\n        }\r\n    }\r\n    \r\n    calcTotal()\r\n\r\n    function getStaticInformation(selector, activeClass) {              // выбираем активность и переключаем классы активности элементов, аргументы: массив с элементами, класс активности \r\n        let elements = document.querySelectorAll(selector)              // обращаемся к массиву с элементами\r\n\r\n        elements.forEach(elem => {\r\n            elem.addEventListener('click', (e) => {                                             // работаем с блоком выбора активности \r\n                if (e.target.getAttribute('data-ratio')) {                                      // если у элемента, который мы выбрали есть атрибут data-ratio\r\n                    ratio = +e.target.getAttribute('data-ratio')                                // меняем значение переменной ratio на значение из атрибута data-ratio этого элемента  \r\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'))\r\n                } else {                                                                        // работаем с блоком выбора пола\r\n                    sex = e.target.getAttribute('id')                                           // получаем id: female или male \r\n                    localStorage.setItem('sex', e.target.getAttribute('id'))\r\n                }\r\n    \r\n                elements.forEach(elem => {                      // работаем с классами активности: сначала убирааем у всех элементов, потом назначаем тому, на который кликнули \r\n                    elem.classList.remove(activeClass)          // убираем \r\n                })\r\n    \r\n                e.target.classList.add(activeClass)             // назначаем \r\n                \r\n                calcTotal()\r\n            })\r\n        })\r\n    }\r\n\r\n    getStaticInformation('#gender div', 'calculating__choose-item_active')                      // аргументы: блок выбора пола, класс активности \r\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active')     // аргументы: блок выбора активности, класс активности \r\n\r\n    function getDinamicInformation(selector) {              // работаем с конституцией, аргументы: селектор инпута, который сейчас редактируется \r\n        let input = document.querySelector(selector)        // обращаемся к инпуту \r\n\r\n        input.addEventListener('input', () => {             // отслеживаем, когда мы вводим данные \r\n            \r\n            if (input.value.match(/\\D/g)) {                 // используем реулярные выражения и обратные классы: если мы нашли не число в значении инпута \r\n                input.style.border = '1px solid red'        // выделяем инпут рамкой красного цвета \r\n            } else {                                        // если цифры\r\n                input.style.border = 'none'                 // убираем рамку \r\n            }\r\n            \r\n            switch(input.getAttribute('id')) {              // ориентируясь на id, проверяем в какой инпут введены данные и записываем их в определенную переменную \r\n                case 'height':                              // если id = height\r\n                    height = +input.value                   // записываем значение из инпута в переменную height\r\n                    break\r\n                case 'weight':\r\n                    weight = +input.value\r\n                    break\r\n                case 'age':\r\n                    age = +input.value\r\n                    break\r\n            }\r\n\r\n            calcTotal()\r\n        })\r\n    }\r\n\r\n    getDinamicInformation('#height')                // вызываем функцию с тремф разными селекторами: height, weight и age\r\n    getDinamicInformation('#weight')\r\n    getDinamicInformation('#age')\r\n}\r\n\r\nexport default calc","function cards() {\r\n\r\n    // Используем классы для создания карточек меню: \r\n\r\n    class MenuCard {\r\n        constructor(src, alt, title, descr, price, parentSelector) {\r\n            this.src = src\r\n            this.alt = alt\r\n            this.title = title\r\n            this.descr = descr\r\n            this.price = price\r\n            this.parent = document.querySelector(parentSelector)\r\n        }\r\n\r\n        render() {\r\n            let element = document.createElement('div')\r\n            element.innerHTML = `\r\n            <div class=\"menu__item\">\r\n                <img src=${this.src} alt=${this.alt}>\r\n                <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n                <div class=\"menu__item-descr\">${this.descr}</div>\r\n                <div class=\"menu__item-divider\"></div>\r\n                <div class=\"menu__item-price\">\r\n                    <div class=\"menu__item-cost\">Цена:</div>\r\n                    <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n            </div>\r\n            `\r\n            this.parent.append(element)        \r\n        }\r\n    }\r\n\r\n    let getResource = async (url) => {\r\n        let res = await fetch(url)\r\n        \r\n        if (!res.ok) {                                                              // если запрос не ок, то сработает блок cach \r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`)        // создаем исключение с помощью new Error и выбрасываем с помощью throw \r\n        }\r\n        return await res.json()\r\n    }\r\n    \r\n    // getResource('http://localhost:3000/menu')                                                       // отправляем запрос на сервер и получаем массив с объектами menu \r\n    //     .then(data => {\r\n    //         data.forEach(({img, altimg, title, descr, price}) => {                                  // перебираем массив и деструктуризируем объект, который находится внутри по свойствам: img, altimg и так далее \r\n    //             new MenuCard(img, altimg, title, descr, price * 69, '.menu .container').render()    // передаем свойства объекта конструктору, который создает новую карточку \r\n    //         })\r\n    //     })\r\n\r\n    axios.get('http://localhost:3000/menu')\r\n        .then(data => {\r\n            console.log(data)                                                   // объект с общей информацией\r\n            console.log(data.data)                                              // данные, которые мы получили\r\n            data.data.forEach(({img, altimg, title, descr, price}) => {                                 // перебираем массив и деструктуризируем объект, который находится внутри по свойствам: img, altimg и так далее \r\n                new MenuCard(img, altimg, title, descr, price * 69, '.menu .container').render()        // передаем свойства объекта конструктору, который создает новую карточку \r\n            })\r\n        })\r\n}\r\n\r\nexport default cards","import {postData} from '../services/services'\r\n\r\nfunction forms(formSelector, openTimer) {\r\n    \r\n    // Forms: \r\n\r\n    let forms = document.querySelectorAll(formSelector)\r\n\r\n    let message = {                                     // хранилище сообщений, которые мы хотим показать  \r\n        loading: 'Загрузка',\r\n        succes: 'Спасибо, скоро мы с Вами свяжемся',\r\n        failture: 'Что-то пошло не так...'\r\n    }\r\n    \r\n    forms.forEach(elem => {                             // перебираем массив и для каждого элемента вызываем bindPostData \r\n        bindPostData(elem)\r\n    })\r\n\r\n    // postData настраивает наш запрос, с помощью fetch отправляет его на сервер, получает ответ и трансформирует его в json: \r\n    // async: добавляем перед функцией, т.е. наша функция содержит асинхронный код, await: отмечаем строчки, выполнения которых нам нужно дождаться, т.е. асинхронный код станет похож на синхронный \r\n    \r\n    function bindPostData(form) {\r\n        form.addEventListener('submit', (e) => {                    // submit срабатывает при отправке формы \r\n            e.preventDefault()                                      // отменяем перезагрузку \r\n\r\n            let statusMessage = document.createElement('div')       // создаем новый блок для оповещения пользователя \r\n            statusMessage.classList.add('status')\r\n            statusMessage.textContent = message.loading             // как только начнется загрузка, показываем сообщение \r\n            form.append(statusMessage)\r\n\r\n            let formData = new FormData(form)               // получаем данные из формы для передачи на сервер, аргумент: та форма, из которой нужно собрать данные \r\n            \r\n            let json = JSON.stringify(Object.fromEntries(formData.entries()))       // берем formData, которая собрала данные, превращаем ее в массив entries, чтобы мы могли рабоатть с ней, после в объект, после в JSON \r\n\r\n            postData('http://localhost:3000/requests', json)        // вызываем postData, аргументы: url и данные, которые пойдут на сервер \r\n            .then(data => {                                         // обрабатывам then, т.е. успешное выполнение, data - это те данные, которые нам вернул сервер \r\n                    console.log(data)\r\n                    statusMessage = message.succes      // показываем сообщение \r\n                    statusMessage.remove()              // удаляем блок statusMessage со страницы \r\n            })\r\n            .catch(() => {                                          // если ошибка\r\n                statusMessage = message.failture\r\n            }).finally(() => {                                      // действия, который выполняются всегда \r\n                form.reset()                                        // очищаем форму \r\n            })\r\n        })\r\n    }\r\n\r\n    // Используем fetch, GET: \r\n\r\n    // fetch('https://jsonplaceholder.typicode.com/todos/1')           // адрес сервера, возвращается промис, который обрабатываем, используя then \r\n    //     .then(response => response.json())                          // получаем response, т.е. ответ в формате json, который fetch превращает в объект js, используя метод json и возвращает промис \r\n    //     .then(json => console.log(json))                            // полученный объект выводим в консоль \r\n    \r\n\r\n    // Используем fetch, POST: \r\n\r\n    // fetch('https://jsonplaceholder.typicode.com/posts', {\r\n    //     method: 'POST',                                             // тип запроса \r\n    //     body: JSON.stringify({name: 'Harry'}),                      // что отправляем: мы можем поместить как строку, так и объект, после чего переводим данные в JSON \r\n    //     headers: {                                                  // заголовки \r\n    //         'Content-type': 'application/json'\r\n    //     }\r\n    // })\r\n    //     .then(response => response.json())\r\n    //     .then(json => console.log(json))\r\n    \r\n    fetch('http://localhost:3000/menu')\r\n        .then(data => data.json())\r\n        // .then(res => console.log(res))\r\n}\r\n\r\nexport default forms","function openModal(modalSelector, openTimer) {              // открываем\r\n    let modal = document.querySelector(modalSelector)\r\n    modal.style.display = 'block'\r\n    document.body.style.overflow = 'hidden'                 // убираем прокрутку на заднем фоне \r\n\r\n    console.log(openTimer)\r\n    if (openTimer) {\r\n        clearInterval(openTimer)                            // отменяем открытие через 20 сек\r\n    }  \r\n}\r\n\r\nfunction closeModal(modalSelector) {                        // закрываем \r\n    let modal = document.querySelector(modalSelector)\r\n    modal.style.display = ''\r\n    document.body.style.overflow = ''\r\n}\r\n\r\nfunction modal(triggerSelector, modalSelector, openTimer) {\r\n\r\n    let modalTrigger = document.querySelectorAll(triggerSelector),\r\n        modal = document.querySelector(modalSelector),\r\n        modalClose = document.querySelector('[data-close]')\r\n    \r\n    modalTrigger.forEach(element => {                                                       // при клике на одну из кнопок, открываем окно \r\n        element.addEventListener('click', () => openModal(modalSelector, openTimer))        // если вызвать функцию после события 'click', т.е. поставить скобки, она не будет дожидаться события, а выполнится сразу, чтобы обойти, нужно поставить стрелочную функцию, которая будет оборачивать вызывающуюся  \r\n    })\r\n\r\n    modalClose.addEventListener ('click', () => closeModal(modalSelector))      // закрываем при нажатии на 'close' \r\n\r\n    modal.addEventListener('click', (e) => {        // закрываем при нажатии за пределами \r\n        if (e.target == modal) {\r\n            closeModal(modalSelector)\r\n        }\r\n    })\r\n\r\n    document.addEventListener(\"keydown\", (e) => {                       // закрываем при нажатии на Esc \r\n        if (e.code == \"Escape\" && modal.style.display == 'block') {     // если мы нажали на Esc и окно открыто \r\n            closeModal(modalSelector)\r\n        }\r\n    })\r\n    \r\n    function showModalByScroll() {\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight -1) {\r\n            openModal(modalSelector, openTimer)\r\n            window.removeEventListener('scroll', showModalByScroll)\r\n       }\r\n    }\r\n    \r\n    window.addEventListener('scroll', showModalByScroll)\r\n}\r\n\r\nexport default modal\r\nexport {openModal}\r\nexport {closeModal}","function slide({container, slide, nextArrow, prevArrow, totalCounter, currentCounter}) {\r\n    \r\n    // Slide: \r\n\r\n    let slides = document.querySelectorAll(slide),\r\n        slider = document.querySelector(container),\r\n        prev = document.querySelector(prevArrow),                   // стрелочка назад \r\n        next = document.querySelector(nextArrow),                   // стрелочка вперед\r\n        total = document.querySelector(totalCounter),               // показывает общее количество слайдов\r\n        current = document.querySelector(currentCounter),           // показывает текущий слайд\r\n        slideIndex = 1                                              // индекс, который определяет текущее положение слайда \r\n    \r\n    showSlides(slideIndex)\r\n    \r\n    if (slides.length < 10) {                       // если количество слайдов меньше десяти, добавляем 0 перед значением \r\n        total.textContent = `0${slides.length}`\r\n    } else {\r\n        total.textContent = slides.length           // если больше, не добавляем \r\n    }\r\n\r\n    slider.style.position = 'relative'\r\n    \r\n    let indicators = document.createElement('ol'),              // создаем переменную для точек \r\n        dots = []\r\n    indicators.classList.add('carousel-indicators')             // добавляем класс \r\n    indicators.style.cssText =                                  // добавляем стили, используя свойство cssText \r\n    `   position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 15;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-right: 15%;\r\n        margin-left: 15%;\r\n        list-style: none;\r\n    `\r\n    slider.append(indicators)                   // помещаем обертку внутрь слайдера \r\n\r\n    for (let i = 0; i < slides.length; i++) {           // используем цикл и создаем точки, учитывая текущее количество слайдов \r\n        let dot = document.createElement('li')          // создаем li \r\n        dot.setAttribute('data-slide-to', i + 1)        // устанавливаем атрибут с нумерацией, т.е. к какому слайду будет относиться точнка \r\n        dot.style.cssText =                             // добавляем стили \r\n        `\r\n        box-sizing: content-box;\r\n        flex: 0 1 auto;\r\n        width: 30px;\r\n        height: 6px;\r\n        margin-right: 3px;\r\n        margin-left: 3px;\r\n        cursor: pointer;\r\n        background-color: #fff;\r\n        background-clip: padding-box;\r\n        border-top: 10px solid transparent;\r\n        border-bottom: 10px solid transparent;\r\n        opacity: .5;\r\n        transition: opacity .6s ease;\r\n        `\r\n        if (i == 0) {                                   // добавляем активность для первой точки, для всех остальных она остается 50% \r\n            dot.style.opacity = 1\r\n        }\r\n\r\n        indicators.append(dot)\r\n        dots.push(dot)                          // помещаем точку в массив, который был создан ранее \r\n    }\r\n\r\n    function showSlides(n) {                    // функция для показа и скрытия слайдов, аргумент: текущий индекс \r\n        if (n > slides.length) {                // если индекс текущего слайда больше длины, перемещаемся на первый слайд \r\n            slideIndex = 1\r\n        }\r\n\r\n        if (n < 1) {                            // если меньше, перемещаемся на последний \r\n            slideIndex = slides.length\r\n        }\r\n        \r\n        slides.forEach(elem => elem.style.display = 'none')     // скрываем слайды, используя инлайн стили \r\n        slides[slideIndex - 1].style.display = ''               // показываем нужный слайд \r\n        \r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`\r\n        } else {\r\n            current.textContent = slideIndex\r\n        }\r\n    }\r\n\r\n    function plusSlides(n) {                    // функция, меняющая значение slideIndex: если мы листаем вперед, значение увеличивается на еденицу, если назад, уменьшается \r\n        showSlides(slideIndex += n)             // если приходит 1, мы увеличивает slideIndex на еденицу, если - 1, уменьшаем \r\n    }\r\n\r\n    prev.addEventListener('click', () => {      // обработчик для стрелочки назад\r\n        plusSlides(-1)\r\n        dots.forEach(elem => elem.style.opacity = '.5')         // изначально прозрачность каждой точки равна 50% \r\n        dots[slideIndex - 1].style.opacity = 1                  // меняем прозрачность активной точки \r\n        \r\n    })\r\n\r\n    next.addEventListener('click', () => {      // обработчик для стрелочки вперед\r\n        plusSlides(1)\r\n        dots.forEach(elem => elem.style.opacity = '.5')         // изначально прозрачность каждой точки равна 50% \r\n        dots[slideIndex - 1].style.opacity = 1                  // меняем прозрачность активной точки     \r\n    })\r\n}\r\n\r\nexport default slide","function tabs(tabsSelector, tabsContentSelector, tabsParentSelector, activeClass) {\r\n    \r\n    // Tabs: \r\n\r\n    let tabs = document.querySelectorAll(tabsSelector),\r\n        tabsContent = document.querySelectorAll(tabsContentSelector),\r\n        tabsParent = document.querySelector(tabsParentSelector)\r\n\r\n    function hideTabContent() {                 // скрываем табы \r\n        tabsContent.forEach(elem => {\r\n            elem.style.display = 'none'\r\n        })\r\n\r\n        tabs.forEach(elem => {                              // убираем активность у элементов \r\n            elem.classList.remove(activeClass)\r\n        })\r\n    }\r\n\r\n    function showTabContent(i = 0) {                        // показываем табы, в качестве аргумента используем индекс элемента, который будет показан при загрузке страницы, по умолчанию будет 0 \r\n        tabsContent[i].style.display = 'block'\r\n        tabs[i].classList.add(activeClass)     // добавляем активность для элементов \r\n\r\n    }\r\n\r\n    hideTabContent()\r\n    showTabContent()\r\n\r\n    tabsParent.addEventListener('click', (event) => {\r\n        let target = event.target\r\n\r\n        if (target && target.classList.contains(tabsSelector.slice(1))) {       // с помощью contains определяем, что мы кликнули на элемент tabheader__item \r\n            tabs.forEach((elem, i) => {                                         // перебираем все табы из tabs и сравниваем: если элемент из tabs совпадает с элементом, на который кликнули, определяем его индекс и показываем элемент на странице, вызывая showTabContent \r\n                if (elem ==  target) {\r\n                    hideTabContent()\r\n                    showTabContent(i)\r\n                }\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nexport default tabs","function timer(id, deadline) {\r\n\r\n    // Timer: \r\n\r\n    function getTimeRemaining(endtime) {                        // разница между дедлайном и текущем временем, в качестве аргумента используем deadline \r\n        let days, hours, minutes, seconds\r\n        let t = Date.parse(endtime) - Date.parse(new Date())    // количество мс до дедлайна - текущая дата в мс = разница, далее эту разницу в мс нужно конвертировать в количество дней, часов, минут и секунд \r\n            \r\n        if (t <= 0) {\r\n            days = 0\r\n            hours = 0\r\n            minutes = 0\r\n            seconds = 0\r\n        } else {\r\n            days = Math.floor(t / (1000 * 60 * 60 * 24)),       // считаем дни: разницу делим на количество мс в одном дне и округляем \r\n            hours = Math.floor((t / (1000 * 60 * 60) % 24)),    // часы: разницу делим на количество мс в одном часе, вычисляем остаток от деления на 24 и округляем \r\n            minutes = Math.floor((t / 1000 / 60) % 60),         // минуты: остаток от деления на 60 \r\n            seconds = Math.floor((t / 1000) % 60)               // секунды \r\n        }\r\n\r\n        return {                        // возвращаем объект с переменными, чтобы их использовать дальше \r\n            'total': t,\r\n            'days': days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        }\r\n    }\r\n    \r\n    function getZero(num) {\r\n        if (num >= 0 && num < 10) {                     // если число меньше десяти, добавляем перед ним 0 \r\n            return `0${num}`\r\n        } else {\r\n            return num\r\n        }\r\n    }\r\n\r\n    function setClock(selector, endtime) {                      // настраиваем часы \r\n        let timer = document.querySelector(selector),           // ищем класс 'timer' на странице, см арументы при вызове \r\n            days = timer.querySelector('#days'),                // ищем элемент days, обращаясь к timer \r\n            hours = timer.querySelector('#hours'),\r\n            minutes = timer.querySelector('#minutes'),\r\n            seconds = timer.querySelector('#seconds'),\r\n            timeInterval = setInterval(updateClock, 1000)       // запускаем updateClock каждую секунду \r\n        \r\n        updateClock()\r\n        \r\n        function updateClock() {                        // обновляем таймер \r\n            let t = getTimeRemaining(endtime)           // вызываем getTimeRemaining и возвращаем объект с данными \r\n            \r\n            days.innerHTML = getZero(t.days)            // меняем текущее значение на значение из свойства days, обращаясь к объекту t  \r\n            hours.innerHTML = getZero(t.hours)\r\n            minutes.innerHTML = getZero(t.minutes)\r\n            seconds.innerHTML = getZero(t.seconds)\r\n            \r\n            if (t.total <= 0) {                         // если значение из объекта <= 0, отменяем setInterval \r\n                clearInterval(timeInterval)\r\n            }\r\n        }\r\n    }\r\n\r\n    setClock(id, deadline)\r\n}\r\n\r\nexport default timer","let postData = async (url, data) => {                   // аргументы: адрес сервера, который передается дальше в fetch и даныые\r\n    let res = await fetch(url, {                        // await, указанный перед промисом запрещает интерпретатору перейти к следующей строчке кода, пока он не выполнится \r\n        method: 'POST',                                 // отправляем данные на сервер \r\n        headers: {                                      // настраиваем заголоки \r\n            'Content-type': 'application/json'\r\n        },\r\n        body: data\r\n    })\r\n\r\n    return await res.json()                             // возвращаем промис в формате json \r\n}\r\n\r\nexport {postData}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import tabs from './modules/tabs'\r\nimport modal from './modules/modal'\r\nimport timer from './modules/timer'\r\nimport cards from './modules/cards'\r\nimport calc from './modules/calc'\r\nimport forms from './modules/forms'\r\nimport slide from './modules/slide'\r\nimport {openModal} from './modules/modal'\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    let openTimer = setTimeout(() => openModal('.modal', openTimer), 4000)                         // открываем через 20 сек после загрузки \r\n    \r\n    tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item_active')\r\n    modal('[data-open]', '.modal', openTimer)\r\n    timer('.timer', '2023-05-06')\r\n    cards()\r\n    calc()\r\n    forms('form', openTimer)\r\n    slide({\r\n        container: '.offer__slider',\r\n        prevArrow: '.offer__slider-prev',\r\n        nextArrow: '.offer__slider-next',\r\n        slide: '.offer__slide',\r\n        totalCounter: '#total',\r\n        currentCounter: '#current',\r\n    })\r\n    \r\n})"],"names":[],"sourceRoot":""}